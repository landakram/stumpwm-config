;; -*- mode: lisp -*-
(in-package :stumpwm)

;; Set up swank so we can connect to stumpwm in emacs
;; using M-x RET slime-connect
(require :swank)
(swank-loader:init)

(ql:quickload "parser.ini")
(ql:quickload "str")

(setf *debug-level* 3)
(redirect-all-output (data-dir-file "debug-output" "txt"))

(defun arrows--simple-inserter (insert-fun)
  (lambda (acc next)
    (if (listp next)
        (funcall insert-fun acc next)
        (list next acc))))

(defun arrows--insert-first (arg surround)
  (list* (car surround)
         arg
         (cdr surround)))

(defun arrows--wrap-as (name)
  (lambda (arg surround)
    `(let ((,name ,arg))
       ,surround)))

(defun arrows--insert-last (arg surround)
  (append surround (list arg)))

(defmacro -> (initial-form &rest forms)
  (reduce (arrows--simple-inserter #'arrows--insert-first)
          forms
          :initial-value initial-form))

(defmacro ->> (initial-form &rest forms)
  (reduce (arrows--simple-inserter #'arrows--insert-last)
          forms
          :initial-value initial-form))

(defmacro as-> (initial-form name &rest forms)
  "Binds name to expr, evaluates the first form in the lexical context
of that binding, then binds name to that result, repeating for each
successive form, returning the result of the last form."
  (reduce (arrows--simple-inserter (arrows--wrap-as name))
          forms
          :initial-value initial-form))

(defmacro --> (initial-form &rest forms)
  "Starting with the value of INITIAL-FORM, thread each expression through FORMS.

Insert X at the position signified by the symbol ‘it’ in the first
form.  If there are more forms, insert the first form at the position
signified by ‘it’ in in second form, etc."
  `(as-> ,initial-form it ,@forms))

;;

(defun run-or-raise-or-pull (cmd props &optional (all-screens *run-or-raise-all-screens*))
  "If in current group, raise. If in other group, pull. Otherwise, run."
  (let* ((matches (find-matching-windows props t all-screens))
         ;; other-matches is list of matches "after" the current
         ;; win, if current win matches. getting 2nd element means
         ;; skipping over the current win, to cycle through matches
         (other-matches (member (current-window) matches))
         (win (if (> (length other-matches) 1)
                  (second other-matches)
                  (first matches))))
    (if win
        (if (equal (window-group win) (current-group))
         (focus-all win)
         (progn
           (pull-w win)
           (focus-all win)))
        (run-shell-command cmd))))

;; Message filters
(defvar *message-filters* '("Group dumped.")
  "Don't show these messages.")

(defun message (fmt &rest args)
  "Overwritten message function to allow filters"
  (let ((msg-string (apply 'format nil fmt args)))
    (unless (member msg-string *message-filters* :test #'string=)
      (echo-string (current-screen) msg-string))))

;; Various commands
(defcommand swank-start () ()
  (swank:create-server :port 4004
                       :style swank:*communication-style*
                       :dont-close t)
  (message "Starting swank. Use M-x RET slime-connect"))

(defcommand swank-stop () ()
  (swank:stop-server 4004)
  (message "Stopping swank."))

(defcommand open-firefox () ()
  "Run firefox"
  (let ((*run-or-raise-all-groups* nil))
    (run-or-raise "firefox" `(:class "firefox"))))

(defun get-firefox-profiles ()
  "Parse firefox's profiles.ini to get the names of profiles."
  (let* ((f (uiop:read-file-string (uiop:native-namestring "~/.mozilla/firefox/profiles.ini"))) 
         (parser.ini:*assignment-operator* #\=)
         (sections (parser.ini:parse f 'list))
         (profile-sections (remove-if-not
                            (lambda (s)
                              (str:starts-with? "Profile" (car (getf s :name))))
                            sections)))
    (mapcar
     (lambda (s)
       (let* ((opts (-> s
                        (getf :section)
                        (getf :section-option))))
         (--> 
          (find-if (lambda (o)
                     (equal
                      (car (getf (car o) :name))
                      "Name"))
                   opts)
          (car it)
          (getf it :value))))
     profile-sections)))

(defcommand run-firefox-with-profile () ()
  (let ((*run-or-raise-all-groups* nil)
        (profile (completing-read (current-screen) "Profile: " (get-firefox-profiles))))
    (run-shell-command (format nil "firefox -P ~A" profile))))

(defcommand run-firefox-matching-current-group () ()
  (let ((*run-or-raise-all-groups* nil)
        (profiles (get-firefox-profiles))
        (profile (group-name (current-group))))
    (if (member profile profiles :test #'equal)
        (run-or-raise (format nil "firefox -P ~A" profile) `(:class "firefox"))
        (message (format nil "No profile named ~A" profile)))))

(defvar *app-map* (make-sparse-keymap))
(define-key *root-map* (kbd ".") '*app-map*)

(defcommand open-chrome () ()
            "Run chrome"
            (run-or-raise "google-chrome-stable" `(:class "Google-chrome")))
(define-key *app-map* (kbd "c") "open-chrome")

(defcommand open-spotify () ()
  "Run spotify"
  (run-or-raise "spotify --force-device-scale-factor=2.25" `(:class "Spotify")))
(define-key *root-map* (kbd "s") "open-spotify")

(defcommand open-thunar () ()
  "Run thunar"
  (run-or-raise-or-pull "thunar" `(:class "Thunar")))
(define-key *root-map* (kbd "F") "open-thunar")

(defcommand open-thunar-new () ()
  "Run thunar"
  (run-shell-command "thunar"))
(define-key *root-map* (kbd "C-F") "open-thunar-new")

(defcommand open-slack () ()
  "Run slack"
  (run-or-raise "slack" `(:class "Slack")))
(define-key *root-map* (kbd "S") "open-slack")

(defcommand open-emacs () ()
  "Run slack"
  (run-or-raise-or-pull "emacs" `(:class "Emacs")))
(define-key *root-map* (kbd "e") "open-emacs")

(defcommand open-terminal () ()
  "Run terminal"
  (let ((*run-or-raise-all-groups* nil))
    (run-or-raise "urxvt" `(:class "URxvt"))))

(defcommand open-terminal-new () ()
  "Run a new terminal"
  (run-shell-command "urxvt"))

(define-key *root-map* (kbd "c") "open-terminal")
(define-key *root-map* (kbd "C-c") "open-terminal-new")

(define-key *root-map* (kbd "|") "hsplit")
(define-key *root-map* (kbd "-") "vsplit")

(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")
(define-key *root-map* (kbd "d") "remove")

(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "L") "move-window right")
(define-key *root-map* (kbd "J") "move-window down")
(define-key *root-map* (kbd "K") "move-window up")

(define-key *root-map* (kbd "f") "run-firefox-matching-current-group")

(define-key *root-map* (kbd "b") "pull-from-windowlist")

;; Rename default group
(setf (group-name (current-group)) "default")

;; Theme

(setf *suppress-frame-indicator* t)
(setf *suppress-abort-messages* t)

(defun set-background ()
  (run-shell-command "~/.fehbg"))

(set-background)
(set-msg-border-width 1)
(setf *message-window-padding* 20)
(setf *message-window-y-padding* 15)
(setf *message-window-gravity* :center)

(setf *normal-border-width* 1)

(setf *window-border-style* :thin)

(setf *window-name-source* :class)

;; Input window

(setf *input-window-gravity* :center)
(setf *input-completion-show-empty* t)

(setf *maximum-completions* 15)

(ql:quickload :stumpwm-prescient)
(setf *input-refine-candidates-fn* 'stumpwm-prescient:refine-input)

(defun input-get-help (input key)
  (declare (ignore key))
  (let ((fn (string-trim
             '(#\Space)
             (car
              (input-find-completions (input-substring input 0 (input-point input)) *input-completions*)))))
    (call-interactively 'describe-function fn)))
(define-key *input-map* (kbd "C-h") 'input-get-help)

;; Modeline

(progn
  (setf *colors*
        '("#0c0d0e"       ;; black 0
          "#cc6666"       ;; red 1 
          "#2f7e10"       ;; green 2
          "#f0c674"       ;; yellow 3
          "#5f819d"       ;; blue 4
          "#f0c674"       ;; magenta => yellow 5
          "#8abeb7"       ;; cyan 6
          "#c5c8c6"       ;; white 7
          "#707880"       ;; lighter gray 8
          "#373b41"))     ;; gray 9
  (update-color-map (current-screen)))

(set-focus-color (nth 7 *colors*))


(defcommand toggle-modeline () ()
  "Toggle the modeline"
  (toggle-mode-line (current-screen) (current-head)))
(define-key *root-map* (kbd "m") "toggle-modeline")

(defun trim-run-shell-command (command)
  (string-trim
   '(#\Newline #\Space)
   (run-shell-command command t)))

(defun get-date ()
  (trim-run-shell-command "date +\"%l:%M %p\"" ))

(defun wifi-strength ()
  (let* ((link-strength (trim-run-shell-command "awk 'NR==3{print $3}' /proc/net/wireless | sed 's/\\.//'"))
         (link-strength (or (ignore-errors (parse-integer link-strength))
                            0)))
    (->> (/ link-strength 70)
         (* 100)
         (truncate)
         (format nil "~d"))))

(defun wifi-interface ()
  (trim-run-shell-command "awk 'NR==3{print $1}' /proc/net/wireless | sed 's/://'"))

(defun wifi-ssid ()
  (trim-run-shell-command (concat "iw dev " (wifi-interface) " info "
                                  " | awk '$1==\"ssid\" {$1 = \"\"; print $0}'")))

(setf *mode-line-border-width* 0)
(setf *mode-line-background-color* (nth 0 *colors*))
(setf *mode-line-foreground-color* (nth 8 *colors*))
(setf *mode-line-pad-x* 5)
(setf *mode-line-pad-y* 1)

(load-module "battery-portable")
(setf battery-portable::*no-battery-info* "")
(load-module "wifi")
(setf *mode-line-position* :top)
(setf *group-format* " %t ")

;; Asynchronously set some modeline data so calculations / external calls don't happen inside
;; the render loop. This speeds up stumpwm significantly because the modeline gets refreshed
;; often (e.g. when switching windows)
(defstruct async-modeline
  wifi-ssid
  wifi-strength
  date)

(defvar *async-modeline* (make-async-modeline))

(defun refresh-modeline ()
  (let ((-wifi-ssid (wifi-ssid))
        (-wifi-strength (wifi-strength))
        (date (get-date)))
    (sb-ext:atomic-update (async-modeline-wifi-ssid *async-modeline*) (lambda (_) -wifi-ssid))
    (sb-ext:atomic-update (async-modeline-wifi-strength *async-modeline*) (lambda (_) -wifi-strength))
    (sb-ext:atomic-update (async-modeline-date *async-modeline*) (lambda (_) date))))

(defvar *modeline-timer* (sb-ext:make-timer (lambda () (refresh-modeline)) :thread t :name "modeline"))
(sb-ext:schedule-timer *modeline-timer* 0 :repeat-interval 5)

(setf *hidden-window-color* "^7")
(setf *screen-mode-line-format*
      (list
       "^8"
       "["
       "^[^1"
       "λ"
       "^]"
       "] "
       "^n"

       ;; Groups
       "^7"
       "%g "
       "^n"

       ;; Windows
       "^7"
       "%v"
       "^n"

       "^>" ;; Float right
       '(:eval (async-modeline-wifi-ssid *async-modeline*))
       " "
       "[" '(:eval (async-modeline-wifi-strength *async-modeline*)) "%" "]"
       " | "
       '(:eval (async-modeline-date *async-modeline*)) 
       " | "
       "%B" ;; Battery
       ))

(setf *mode-line-timeout* 1)

(if (not (head-mode-line (current-head)))
    (toggle-mode-line (current-screen) (current-head)))

;; Set focus follows mouse
(setf *mouse-focus-policy* :sloppy) 

;; Fonts

(ql:quickload :clx-truetype)
(load-module "ttf-fonts")

(set-font
 (make-instance 'xft:font
                :family "Fira Mono"
                :subfamily "Regular"
                :size 20))

;; Screenshots

(defcommand screenshot () ()
  "Take screenshot"
  ;; Run with a timer because otherwise input window is still visible
  ;; when run with `colon'
  (run-with-timer 0.1 nil
                  (lambda ()
                    (run-shell-command "flameshot gui"))))

;; "F8" key on Dell XPS
(define-key *top-map* (kbd "s-p") "screenshot")

;; Volume

(defun get-volume ()
  (ppcre:register-groups-bind (volume)
      ("\\[(.*?)%\\]"
       (run-shell-command "amixer get Master" t))
    (when volume
      (format nil "Volume: ~a%"
              volume))))

(defun volume-muted? ()
  (ppcre:register-groups-bind (mutep)
      ("\\[(on|off)\\]"
       (run-shell-command "amixer get Master" t))
    (when mutep
      (string= "off" mutep))))

(defcommand lower-volume () ()
    "Lower volume"
  (run-shell-command "amixer set Master \"5%-\"")
  (message (get-volume)))

(defcommand raise-volume () ()
    "Raise volume"
  (run-shell-command "amixer set Master \"5%+\"")
  (message (get-volume)))

(defcommand toggle-volume () ()
  "Toggle volume"
  (run-shell-command "amixer set Master toggle")
  (if (volume-muted?)
      (message "Volume off")
      (message "Volume on")))

(define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
(define-key *top-map* (kbd "XF86AudioMute") "toggle-volume")

(defun get-backlight ()
  (format nil "Brightness: ~a"
          (trim-run-shell-command "xbacklight -get" )))

(defcommand lower-backlight () ()
    "Lower backlight"
  (run-shell-command "xbacklight -dec 5")
  (message (get-backlight)))

(defcommand raise-backlight () ()
    "Raise backlight"
  (run-shell-command "xbacklight -inc 5")
  (message (get-backlight)))

(defcommand screen-off () ()
  "Lower backlight to 0"
  (run-shell-command "xbacklight -set 0"))

(defcommand screen-on () ()
  "Lower backlight to 0"
  (run-shell-command "xbacklight -set 100"))

(defcommand screen-prompt () ()
  "Lower backlight to a prompted value"
  (let ((backlight-value (completing-read (current-screen) "Desired brightness: " '())))
    (run-shell-command (format nil "xbacklight -set ~s" backlight-value))))

(define-key *top-map* (kbd "XF86MonBrightnessDown") "lower-backlight")
(define-key *top-map* (kbd "XF86MonBrightnessUp") "raise-backlight")

(defcommand pkill () ()
  "Run pkill using user input"
  (let ((program-to-kill (completing-read (current-screen)
                                          "Program to kill: "
                                          '("firefox" "redshift" "emacs"))))
    (run-shell-command (format nil "pkill -f ~s" program-to-kill))))

(define-key *root-map* (kbd "K") "pkill")

;; External monitor

(defcommand display-menu () ()
  "Toggle display controls. Very basic."
  (let ((selection (car (select-from-menu
                         (current-screen)
                         '("Built-in" "Home" "Office")
                         "Display: "))))
    (cond
      ((string= selection "Home")
       (run-shell-command "~/.screenlayout/external-monitor.sh")
       (refresh-heads))
      ((string= selection "Office")
       (run-shell-command "~/.screenlayout/external-monitor-office.sh")
       (refresh-heads))
      ((string= selection "Built-in")
       (run-shell-command "xrandr --output eDP1 --auto --output DP1 --off")
       (refresh-heads)))))
(define-key *root-map* (kbd "D") "display-menu")

;; Start-up stuff

(setf *startup-message* nil)

(run-shell-command "compton")
(run-shell-command "redshift")
;; Lock + screensaver
(run-shell-command "light-locker --lock-on-lid")
;; Key repeat speed, also set in /etc/lightdm/lightdm.conf so that
;; it applies universally to all keyboards.
(run-shell-command "xset r rate 200 40")
(run-shell-command "dropbox")
(run-shell-command "gnome-keyring-daemon --start")
(swank-start)

;; Enable tap-to-click
;; See https://wiki.archlinux.org/index.php/Libinput#Configuration
(run-shell-command "xinput set-prop \"DLL082A:01 06CB:76AF Touchpad\" \"libinput Tapping Enabled\" 1")

;; Shut-down

(load-module "end-session")
(define-key *root-map* (kbd "q") "end-session")

;; Winner mode

(load-module "winner-mode")
(define-key *root-map* (kbd "Left") "winner-undo")
(define-key *root-map* (kbd "Right") "winner-redo")

(add-hook *post-command-hook* (lambda (command)
                                (when (member command winner-mode:*default-commands*)
                                  (winner-mode:dump-group-to-file))))

;; exchange-window-map additions

(defcommand exchange-select () ()
  (let ((new-window (choose-frame-by-number (current-group))))
    (exchange-windows (current-window) (frame-window new-window))))
(define-key *exchange-window-map* (kbd "s") "exchange-select")

(defcommand exchange-from-windowlist () ()
  (let ((new-window (select-window-from-menu
                     (group-windows (current-group))
                     *window-format*)))
    (exchange-windows (current-window) new-window)))
(define-key *exchange-window-map* (kbd "w") "exchange-from-windowlist")

;; groups

(defcommand gmove-all-to-group (to-group) ((:group "To Group: "))
  "Move all windows to a different group. Useful after a crash."
  (let ((all-windows (all-windows)))
    (dolist (window all-windows)
      (move-window-to-group window to-group))))

;; Nord

(defun nord-connected? ()
  (ppcre:register-groups-bind (connectedp)
      ("Status: Connected"
       (run-shell-command "nordvpn status" t))
    connectedp))

(defun get-completions (cmd-substr)
  (let* ((cmd (uiop:native-namestring "~/local/bin/get_completions"))
         (completions-str (trim-run-shell-command (concat cmd " " cmd-substr))))
    (cl-ppcre:split #\Newline completions-str)))

(defun nord-connect-completions ()
  (get-completions "nordvpn connect"))

(defcommand nord-connect () () 
  (let ((where (completing-read (current-screen) "Where? " (nord-connect-completions))))
    (message (trim-run-shell-command (concat "nordvpn connect " where)))))

(defcommand nord-disconnect () ()
  (message (trim-run-shell-command (concat "nordvpn disconnect"))))

(defcommand nord-toggle () ()
  (if (nord-connected?)
      (message (trim-run-shell-command "nordvpn disconnect"))
      (nord-connect)))

(defcommand nord-status () ()
  (message (trim-run-shell-command "nordvpn status")))

;; Notify

(load-module "notify")
(notify:notify-server-toggle)

(setf notify:*notify-server-title-color* "^6")
(setf notify:*notify-server-body-color* "^7")

(defvar *notification-filter* (constantly t))

(defun do-not-disturb-notification-filter (app icon summary body)
  (not (member app '("Slack") :test #'string=)))

(defvar *do-not-disturb-mode* nil)
(defcommand do-not-disturb-mode () ()
  (if *do-not-disturb-mode*
      (progn
        (setf *do-not-disturb-mode* nil)
        (setf *notification-filter* (constantly t))
        (message "Do not disturb is off"))
      (progn
        (setf *do-not-disturb-mode* t)
        (setf *notification-filter* #'do-not-disturb-notification-filter)
        (message "Do not disturb is on"))))

(defun show-notification (app icon summary body)
  "Override to show notification windows in the top right."
  (declare (ignore app icon))
  (dformat 1 "app ~A icon ~A summary ~A" app icon summary)
  (let ((*message-window-gravity* :top-right))
    (when (funcall *notification-filter* app icon summary body)
      (message "~A~A^0~% ~%~A~A^0"
               notify:*notify-server-title-color*
               (notify::rewrap-body
                summary
                :max-lines notify:*notify-server-max-title-lines*
                :show-ellipsis t)
               notify:*notify-server-body-color*
               (notify::rewrap-body
                body
                :max-lines notify:*notify-server-max-body-lines*
                :show-ellipsis t)))))

(setf notify:*notification-received-hook* '(show-notification))
